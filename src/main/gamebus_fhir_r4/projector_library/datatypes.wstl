// Description: Construct a FHIR Extension that has no nested extensions
//
// Argument(s):
//   URL: URL that identifies the meaning of the extension
//   Type: Value type
//   Value: Value of the extension
//
// Output(s):
//   FHIR Extension: https://www.hl7.org/fhir/extensibility.html#Extension
//
def Build_Extension(required URL, required Type, required Value) {
  url: URL
  valueBase64Binary (if Type = "valueBase64Binary"): Value
  valueBoolean (if Type = "valueBoolean"): Value
  valueCanonical (if Type = "valueCanonical"): Value
  valueCode (if Type = "valueCode"): Value
  valueDate (if Type = "valueDate"): Value
  valueDateTime (if Type = "valueDateTime"): Value
  valueDecimal (if Type = "valueDecimal"): Value
  valueId (if Type = "valueId"): $StrFmt("%d", Value)
  valueInstant (if Type = "valueInstant"): Value
  valueInteger (if Type = "valueInteger"): Value
  valueMarkdown (if Type = "valueMarkdown"): Value
  valueOid (if Type = "valueOid"): Value
  valuePositiveInt (if Type = "valuePositiveInt"): Value
  valueString (if Type = "valueString"): Value
  valueTime (if Type = "valueTime"): Value
  valueUnsignedInt (if Type = "valueUnsignedInt"): Value
  valueUri (if Type = "valueUri"): Value
  valueUrl (if Type = "valueUrl"): Value
  valueUuid (if Type = "valueUuid"): Value
  valueAddress (if Type = "valueAddress"): Value
  valueAge (if Type = "valueAge"): Value
  valueAnnotation (if Type = "valueAnnotation"): Value
  valueAttachment (if Type = "valueAttachment"): Value
  valueCodeableConcept (if Type = "valueCodeableConcept"): Value
  valueCoding (if Type = "valueCoding"): Value
  valueContactPoint (if Type = "valueContactPoint"): Value
  valueCount (if Type = "valueCount"): Value
  valueDistance (if Type = "valueDistance"): Value
  valueDuration (if Type = "valueDuration"): Value
  valueHumanName (if Type = "valueHumanName"): Value
  valueIdentifier (if Type = "valueIdentifier"): Value
  valueMoney (if Type = "valueMoney"): Value
  valuePeriod (if Type = "valuePeriod"): Value
  valueQuantity (if Type = "valueQuantity"): Value
  valueRange (if Type = "valueRange"): Value
  valueRatio (if Type = "valueRatio"): Value
  valueReference (if Type = "valueReference"): Value
  valueSampledData (if Type = "valueSampledData"): Value
  valueSignature (if Type = "valueSignature"): Value
  valueTiming (if Type = "valueTiming"): Value
  valueContactDetail (if Type = "valueContactDetail"): Value
  valueContributor (if Type = "valueContributor"): Value
  valueDataRequirement (if Type = "valueDataRequirement"): Value
  valueExpression (if Type = "valueExpression"): Value
  valueParameterDefinition (if Type = "valueParameterDefinition"): Value
  valueRelatedArtifact (if Type = "valueRelatedArtifact"): Value
  valueTriggerDefinition (if Type = "valueTriggerDefinition"): Value
  valueUsageContext (if Type = "valueUsageContext"): Value
  valueDosage (if Type = "valueDosage"): Value
  valueMeta (if Type = "valueMeta"): Value
}

// Description: Build FHIR Identifier datatype
//
// Argument(s):
//   System: the namespace for the identifier value
//   Value: the identifier value
//
// Output(s):
//   FHIR Identifier datatype: http://hl7.org/fhir/datatypes.html#Identifier
//
def Build_Identifier(System, Value) {
  system: System
  value: $StrFmt("%d", Value)
}

// Description: Build FHIR Reference datatype
//
// Argument(s):
//   LiteralRef: Literal reference. Relative, internal or absolute URL
//   LogicalRef: Logical reference, when literal reference is not known
//   Type: Resource type the reference refers to, e.g. "Patient" (http://hl7.org/fhir/valueset-resource-types.html)
//   Display: Text alternative for the resource
//
// Output(s):
//   FHIR Reference: http://hl7.org/fhir/references.html#Reference
//
def Build_Reference(LiteralRef, LogicalRef, Type, Display) {
  reference: LiteralRef
  identifier: LogicalRef
  type: Type
  display: Display
}

// Description: Convert epoch timestamp to FHIR Date
//
// Argument(s):
//   Timestamp: Epoch timestamp in milliseconds
//
// Output(s):
//   FHIR Date datatype: https://www.hl7.org/fhir/datatypes.html#date
//
def Convert_Date(Timestamp) {
  $this: $ParseUnixTime("ms", Timestamp, "2006-01-02", "Local")
}

// Description: Convert epoch timestamp to FHIR Instant
//
// Argument(s):
//   Timestamp: Epoch timestamp in milliseconds
//
// Output(s):
//   FHIR Instant datatype: https://www.hl7.org/fhir/datatypes.html#instant
//
def Convert_Instant(Timestamp) {
  $this: $ParseUnixTime("ms", Timestamp, "2006-01-02T15:04:05.000Z07:00", "Local")
}

// Description: Convert GameBus terminology into FHIR CodeableConcept
//
// Argument(s):
//   Code: The GameBus code to lookup
//   System: The system that the source code is in (https://build.fhir.org/conceptmap-definitions.html#ConceptMap.group.source)
//   ConceptMapID: The ID of the ConceptMap to lookup against (https://www.hl7.org/fhir/conceptmap.html)
//
// Output(s):
//   FHIR CodeableConcept datatype: https://www.hl7.org/fhir/datatypes.html#CodeableConcept
//
def Convert_Terminology(required Code, System, ConceptMapID) {
  if $Type(Code) ~= "string" {
    var strCode: $StrFmt("%d", Code)
  } else {
    var strCode: Code
  }
  coding: $HarmonizeCode("$Local", strCode, System, ConceptMapID);
}

// Description: Convert GameBus terminology into FHIR Code
//
// Argument(s):
//   Code: The GameBus code to lookup
//   System: The system that the source code is in (https://build.fhir.org/conceptmap-definitions.html#ConceptMap.group.source)
//   ConceptMapID: The ID of the ConceptMap to lookup against (https://www.hl7.org/fhir/conceptmap.html)
//
// Output(s):
//   FHIR Code datatype: https://www.hl7.org/fhir/datatypes.html#code
//
def Convert_TerminologyCode(required Code, System, ConceptMapID) {
  if $Type(Code) ~= "string" {
    var strCode: $StrFmt("%d", Code)
  } else {
    var strCode: Code
  }
  var mapping: $HarmonizeCode("$Local", strCode, System, ConceptMapID);
  $this: mapping[0].code;
}

// Description: Convert GameBus terminology into FHIR Coding
//
// Argument(s):
//   Code: The GameBus code to lookup
//   System: The system that the source code is in (https://build.fhir.org/conceptmap-definitions.html#ConceptMap.group.source)
//   ConceptMapID: The ID of the ConceptMap to lookup against (https://www.hl7.org/fhir/conceptmap.html)
//
// Output(s):
//   FHIR Coding datatype: https://www.hl7.org/fhir/datatypes.html#Coding
//
def Convert_TerminologyCoding(required Code, System, ConceptMapID) {
  if $Type(Code) ~= "string" {
    var strCode: $StrFmt("%d", Code)
  } else {
    var strCode: Code
  }
  var mapping: $HarmonizeCode("$Local", strCode, System, ConceptMapID);
  $this: mapping[0];
}

// Description: Convert GameBus dataProvider into FHIR Device resource
//
// Argument(s):
//   DataProvider: GameBus dataProvider
//
// Output(s):
//   FHIR Device: http://hl7.org/fhir/device.html
//
def DataProvider_Device(DataProvider) {
  identifier: Build_Identifier("https://gamebus.eu/activity#dataProvider", DataProvider.id) // TODO: fix url
  deviceName[0].name: DataProvider.name
  deviceName[0].type: "user-friendly-name" // TODO: change the code if needed
}

// Description: Convert GameBus image into FHIR Attachment datatype
//
// Argument(s):
//   URL: URL of GameBus image
//
// Output(s):
//   FHIR Attachment datatype: https://www.hl7.org/fhir/datatypes.html#Attachment
//
def Image_Attachment(URL) {
  url: URL
}

// Description: Convert GameBus language into FHIR CodeableConcept datatype
//
// Argument(s):
//   Language: GameBus language
// Output(s):
//
//   FHIR CodeableConcept datatype: https://www.hl7.org/fhir/datatypes.html#CodeableConcept
//
def Language_CodeableConcept(Language) {
  coding[0].code: Language;
  coding[0].system: "urn:ietf:bcp:47";
  if (Language = "en") {
    coding[0].display: "English";
  }  else {
    coding[0].display: "Dutch";
  }
}

// Description: Convert GameBus membership to FHIR Extension
//
// Argument(s):
//   Membership: GameBus membership
//
// Output(s):
//   FHIR Extension: https://www.hl7.org/fhir/extensibility.html#Extension
//
// TODO: fix all URLs in this function
def Membership_Extension(Membership) {
  url: "https://gamebus.eu/membership"
  extension[]: Build_Extension("https://gamebus.eu/membership#id", "valueId", Membership.id)
  extension[]: Build_Extension("https://gamebus.eu/membership#translationKey", "valueString", Membership.state)
  extension[]: Build_Extension("https://gamebus.eu/membership/circle#id", "valueId", Membership.circle.id)
  extension[]: Build_Extension("https://gamebus.eu/membership/circle#name", "valueString", Membership.circle.name)
  extension[]: Build_Extension("https://gamebus.eu/membership/circle#image", "valueUrl", Membership.circle.image)
  extension[]: Build_Extension("https://gamebus.eu/membership/circle#isPrivate", "valueBoolean", Membership.circle.isPrivate)
}

// Description: Convert GameBus PlayerRole to FHIR Extension
//
// Argument(s):
//   PlayerRole: GameBus playerRole
//
// Output(s):
//   FHIR Extension: https://www.hl7.org/fhir/extensibility.html#Extension
//
// TODO: fix all URLs in this function
def PlayerRole_Extension(PlayerRole) {
  url: "https://gamebus.eu/playerRole"
  extension[]: Build_Extension("https://gamebus.eu/playerRole#id", "valueId", PlayerRole.id)
  extension[]: Build_Extension("https://gamebus.eu/playerRole#translationKey", "valueString", PlayerRole.translationKey)
  extension[]: Build_Extension("https://gamebus.eu/playerRole#image", "valueString", PlayerRole.image)
}

// Description: Construct FHIR ContactPoint datatype based on GameBus user
//
// Argument(s):
//   User: GameBus user
//
// Output(s):
//   FHIR ContactPoint datatype: https://www.hl7.org/fhir/datatypes.html#ContactPoint
//
def User_ContactPoint(User) {
  system: "email"
  value: User.email
}

// Description: Construct FHIR extension for unmatched GameBus user attributes
//
// Argument(s):
//   User: GameBus user
//
// Output(s):
//   FHIR Extension: https://www.hl7.org/fhir/extensibility.html#Extension
//
// TODO: fix all URLs in this function
def User_Extension(User) {
  url: "https://gamebus.eu/user"
  extension[]: Build_Extension("https://gamebus.eu/user#registrationDate", "valueInstant", Convert_Instant(User.registrationDate))
  extension[]: Build_Extension("https://gamebus.eu/user#isActivated", "valueBoolean", User.isActivated)
}

// Description: Construct FHIR HumanName datatype based on GameBus user
//
// Argument(s):
//   User: GameBus user
//
// Output(s):
//   FHIR HumanName datatype: https://www.hl7.org/fhir/datatypes.html#HumanName
//
def User_HumanName(User) {
  given[]: User.firstName
  family: User.lastName
}

// Description: Convert GameBus propertyInstance into FHIR Observation.component.
//
//  The file `ObservationComponent.harmonization.json` is the concept mapping
//  between GameBus properties and FHIR Observation.component.code.
//  This file has to be updated when there are new types of GameBus properties.
//  However, GameBus properties excluded for mapping must not be added, e.g.
//  COORDINATES, BP_SYS_DIV_DIA, etc.
//
// Argument(s):
//   PropertyInstance: GameBus property instance
//
// Output(s):
//   Observation.component: https://www.hl7.org/fhir/observation-definitions.html#Observation.component
def PropertyInstance_Component(PropertyInstance) {
  var codes: Convert_Terminology(PropertyInstance.property.translationKey, "GameBusProperty", "ObservationComponentCode")
  if codes.coding[0].code ~= "unknown" {
      extension[]: Build_Extension("https://gamebus.eu/PropertyInstances#id", "valueInteger", PropertyInstance.id) // TODO: fix url
      $this: Property_ValueX(PropertyInstance)
      code: codes
  }
}

// Description: Convert GameBus properties into FHIR Observation.component.value[x]
//
// Argument(s):
//   PropertyInstance: GameBus property instance
//
// Output(s):
//   Observation.component.value[x]: https://www.hl7.org/fhir/observation-definitions.html#Observation.component.value_x_
//
def Property_ValueX(PropertyInstance) {
  // TODO: add other GameBus property types: ACTIVITY, CHALLENGE, CHALLENGE_RULE, DATE, LOTTERY, NUMBER_OF_POINTS, REWARD, VIDEO
  if (PropertyInstance.property.inputType = "INT") {
    var mapping: Convert_TerminologyCoding(PropertyInstance.property.baseUnit, "GameBusUnit", "Unit")
    valueQuantity.value: $ParseInt(PropertyInstance.value)
    valueQuantity.unit: mapping.display
    valueQuantity.code: mapping.code
    valueQuantity.system: mapping.system
  }

  var regex: "DOUBLE|DISTANCE|DURATION"
  if $MatchesRegex(PropertyInstance.property.inputType, regex) {
    var mapping: Convert_TerminologyCoding(PropertyInstance.property.baseUnit, "GameBusUnit", "Unit")
    valueQuantity.value: $ParseFloat(PropertyInstance.value)
    valueQuantity.unit: mapping.display
    valueQuantity.code: mapping.code
    valueQuantity.system: mapping.system
  }

  if (PropertyInstance.property.inputType = "STRING") {
    valueString: PropertyInstance.value
  }

  if (PropertyInstance.property.inputType = "BOOL") {
    valueBoolean (if $ToLower(PropertyInstance.value) = "true"): true
    valueBoolean (if $ToLower(PropertyInstance.value) = "false"): false
  }
}